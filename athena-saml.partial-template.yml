AWSTemplateFormatVersion: 2010-09-09

Resources:

  AthenaQueryResultsS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref AthenaQueryResultsS3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  EmptyAthenaQueryResultsS3BucketRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: athena-saml-empty-results-bucket
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: athena-saml-empty-results-bucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:DeleteObject'
                Resource:
                  - !GetAtt AthenaQueryResultsS3Bucket.Arn
                  - !Sub
                      - '${BucketArn}/*'
                      - { BucketArn: !GetAtt AthenaQueryResultsS3Bucket.Arn }

  EmptyAthenaQueryResultsS3BucketLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json, boto3
          import cfnresponse

          def lambda_handler(event, context):
              try:
                  bucket = event['ResourceProperties']['BucketName']
                  if event['RequestType'] == 'Delete':
                      s3 = boto3.resource('s3')
                      bucket = s3.Bucket(bucket)
                      bucket.objects.all().delete()

                  sendResponseCfn(event, context, cfnresponse.SUCCESS)
              except Exception as e:
                  sendResponseCfn(event, context, cfnresponse.FAILED)

          def sendResponseCfn(event, context, responseStatus):
              responseData = {}
              responseData['Data'] = {}
              cfnresponse.send(event, context, responseStatus, responseData)
      Handler: 'index.lambda_handler'
      Runtime: 'python3.9'
      MemorySize: 128
      Timeout: 60
      Role: !GetAtt EmptyAthenaQueryResultsS3BucketRole.Arn

  EmptyAthenaQueryResultsS3BucketOnDelete:
    Type: 'Custom::emptyBucket'
    Properties:
      ServiceToken: !GetAtt EmptyAthenaQueryResultsS3BucketLambda.Arn
      BucketName: !Ref AthenaQueryResultsS3Bucket

  AthenaReadOnlyPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: athena-readonly
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'athena:GetDatabase'
              - 'athena:GetDataCatalog'
              - 'athena:GetTableMetadata'
              - 'athena:ListDatabases'
              - 'athena:ListDataCatalogs'
              - 'athena:ListTableMetadata'
              - 'athena:ListWorkGroups'
              - 'athena:ListQueryExecutions'
              - 'athena:GetQueryExecution'
              - 'athena:GetQueryResults'
              - 'athena:GetQueryResultsStream'
              - 'athena:GetWorkGroup'
              - 'athena:StartQueryExecution'
              - 'athena:StopQueryExecution'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - 'glue:GetDatabase'
              - 'glue:GetDatabases'
              - 'glue:GetTable'
              - 'glue:GetTables'
              - 'glue:GetPartition'
              - 'glue:GetPartitions'
              - 'glue:BatchGetPartition'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutBucketPublicAccessBlock'
              - 's3:AbortMultipartUpload'
              - 's3:CreateBucket'
              - 's3:ListBucket'
              - 's3:GetBucketLocation'
              - 's3:ListMultipartUploadParts'
            Resource:
              - !GetAtt AthenaQueryResultsS3Bucket.Arn
              - !Sub
                  - '${BucketArn}/*'
                  - { BucketArn: !GetAtt AthenaQueryResultsS3Bucket.Arn }
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucketMultipartUploads'
              - 's3:ListBucket'
              - 's3:GetBucketLocation'
              - 's3:ListMultipartUploadParts'
            Resource:
              - !Sub 'arn:aws:s3:::athena-examples-${AWS::Region}'
              - !Sub 'arn:aws:s3:::athena-examples-${AWS::Region}/*'

  SimpleSAMLphpIdP:
    Type: 'AWS::IAM::SAMLProvider'
    Properties:
      Name: athena-saml-idp
      SamlMetadataDocument: !Sub >
        # Replace the marker below with the content of SimpleSAMLphp metadata XML
        __METADATA_XML__

  AthenaReadOnlyIdPRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: athena-saml-idp
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref SimpleSAMLphpIdP
            Action: 'sts:AssumeRoleWithSAML'
            Condition:
              StringEquals:
                'SAML:aud':
                  - 'https://signin.aws.amazon.com/saml'
                  - 'http://localhost:7890/athena'
      ManagedPolicyArns:
        - !Ref AthenaReadOnlyPolicy

  AthenaDatabase:
    Type: 'AWS::Glue::Database'
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput:
        Name: !Ref AthenaDatabaseName

  CloudFrontLogsTable:
    Type: 'AWS::Glue::Table'
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseName: !Ref AthenaDatabase
      TableInput:
        Name: cloudfront_logs
        TableType: EXTERNAL_TABLE
        StorageDescriptor:
          Location: !Sub 's3://athena-examples-${AWS::Region}/cloudfront/plaintext/'
          Columns:
            - Name: Date
              Type: date
            - Name: Time
              Type: string
            - Name: Location
              Type: string
            - Name: Bytes
              Type: int
            - Name: RequestIP
              Type: string
            - Name: Method
              Type: string
            - Name: Host
              Type: string
            - Name: Uri
              Type: string
            - Name: Status
              Type: int
            - Name: Referrer
              Type: string
            - Name: os
              Type: string
            - Name: Browser
              Type: string
            - Name: BrowserVersion
              Type: string
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.serde2.RegexSerDe
            Parameters:
              input.regex: ^(?!#)([^ ]+)\s+([^ ]+)\s+([^ ]+)\s+([^ ]+)\s+([^ ]+)\s+([^ ]+)\s+([^ ]+)\s+([^ ]+)\s+([^ ]+)\s+([^ ]+)\s+[^\(]+[\(]([^\;]+).*\%20([^\/]+)[\/](.*)$

Parameters:
  AthenaQueryResultsS3BucketName:
    Type: String
    Description: Name of the S3 bucket where Athena query results will be stored
  AthenaDatabaseName:
    Type: String
    Default: mydatabase
    Description: Name of the database in Athena where cloudfront_logs table is hosted
